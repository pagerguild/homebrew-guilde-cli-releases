// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -source=main.go -destination=./mock_test.go -package=main
//

// Package main is a generated GoMock package.
package main

import (
	os "os"
	reflect "reflect"

	github "github.com/google/go-github/v69/github"
	gomock "go.uber.org/mock/gomock"
)

// MockRelease is a mock of Release interface.
type MockRelease struct {
	ctrl     *gomock.Controller
	recorder *MockReleaseMockRecorder
	isgomock struct{}
}

// MockReleaseMockRecorder is the mock recorder for MockRelease.
type MockReleaseMockRecorder struct {
	mock *MockRelease
}

// NewMockRelease creates a new mock instance.
func NewMockRelease(ctrl *gomock.Controller) *MockRelease {
	mock := &MockRelease{ctrl: ctrl}
	mock.recorder = &MockReleaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelease) EXPECT() *MockReleaseMockRecorder {
	return m.recorder
}

// ComputeChecksums mocks base method.
func (m *MockRelease) ComputeChecksums() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeChecksums")
	ret0, _ := ret[0].(error)
	return ret0
}

// ComputeChecksums indicates an expected call of ComputeChecksums.
func (mr *MockReleaseMockRecorder) ComputeChecksums() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeChecksums", reflect.TypeOf((*MockRelease)(nil).ComputeChecksums))
}

// CreateAssets mocks base method.
func (m *MockRelease) CreateAssets(dirPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssets", dirPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAssets indicates an expected call of CreateAssets.
func (mr *MockReleaseMockRecorder) CreateAssets(dirPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssets", reflect.TypeOf((*MockRelease)(nil).CreateAssets), dirPath)
}

// CreateGitHubClient mocks base method.
func (m *MockRelease) CreateGitHubClient(pat string) *github.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitHubClient", pat)
	ret0, _ := ret[0].(*github.Client)
	return ret0
}

// CreateGitHubClient indicates an expected call of CreateGitHubClient.
func (mr *MockReleaseMockRecorder) CreateGitHubClient(pat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitHubClient", reflect.TypeOf((*MockRelease)(nil).CreateGitHubClient), pat)
}

// CreateGitHubRelease mocks base method.
func (m *MockRelease) CreateGitHubRelease(client *github.Client, version, notesContent string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitHubRelease", client, version, notesContent)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitHubRelease indicates an expected call of CreateGitHubRelease.
func (mr *MockReleaseMockRecorder) CreateGitHubRelease(client, version, notesContent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitHubRelease", reflect.TypeOf((*MockRelease)(nil).CreateGitHubRelease), client, version, notesContent)
}

// GetAssets mocks base method.
func (m *MockRelease) GetAssets() []ReleaseAsset {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssets")
	ret0, _ := ret[0].([]ReleaseAsset)
	return ret0
}

// GetAssets indicates an expected call of GetAssets.
func (mr *MockReleaseMockRecorder) GetAssets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssets", reflect.TypeOf((*MockRelease)(nil).GetAssets))
}

// GetNotesContent mocks base method.
func (m *MockRelease) GetNotesContent() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotesContent")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNotesContent indicates an expected call of GetNotesContent.
func (mr *MockReleaseMockRecorder) GetNotesContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotesContent", reflect.TypeOf((*MockRelease)(nil).GetNotesContent))
}

// GetVersion mocks base method.
func (m *MockRelease) GetVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockReleaseMockRecorder) GetVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockRelease)(nil).GetVersion))
}

// LoadReleaseNotes mocks base method.
func (m *MockRelease) LoadReleaseNotes() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadReleaseNotes")
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadReleaseNotes indicates an expected call of LoadReleaseNotes.
func (mr *MockReleaseMockRecorder) LoadReleaseNotes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadReleaseNotes", reflect.TypeOf((*MockRelease)(nil).LoadReleaseNotes))
}

// UploadReleaseAsset mocks base method.
func (m *MockRelease) UploadReleaseAsset(client *github.Client, releaseID int64, name, mediaType string, file *os.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadReleaseAsset", client, releaseID, name, mediaType, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadReleaseAsset indicates an expected call of UploadReleaseAsset.
func (mr *MockReleaseMockRecorder) UploadReleaseAsset(client, releaseID, name, mediaType, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadReleaseAsset", reflect.TypeOf((*MockRelease)(nil).UploadReleaseAsset), client, releaseID, name, mediaType, file)
}

// Validate mocks base method.
func (m *MockRelease) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockReleaseMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockRelease)(nil).Validate))
}
