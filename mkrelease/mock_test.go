// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -source=main.go -destination=./mock_test.go -package=main
//

// Package main is a generated GoMock package.
package main

import (
	context "context"
	os "os"
	reflect "reflect"

	github "github.com/google/go-github/v69/github"
	gomock "go.uber.org/mock/gomock"
)

// MockRelease is a mock of Release interface.
type MockRelease struct {
	ctrl     *gomock.Controller
	recorder *MockReleaseMockRecorder
	isgomock struct{}
}

// MockReleaseMockRecorder is the mock recorder for MockRelease.
type MockReleaseMockRecorder struct {
	mock *MockRelease
}

// NewMockRelease creates a new mock instance.
func NewMockRelease(ctrl *gomock.Controller) *MockRelease {
	mock := &MockRelease{ctrl: ctrl}
	mock.recorder = &MockReleaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelease) EXPECT() *MockReleaseMockRecorder {
	return m.recorder
}

// CommitFormulaChange mocks base method.
func (m *MockRelease) CommitFormulaChange(ctx context.Context, pat, message string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitFormulaChange", ctx, pat, message)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitFormulaChange indicates an expected call of CommitFormulaChange.
func (mr *MockReleaseMockRecorder) CommitFormulaChange(ctx, pat, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitFormulaChange", reflect.TypeOf((*MockRelease)(nil).CommitFormulaChange), ctx, pat, message)
}

// ComputeChecksums mocks base method.
func (m *MockRelease) ComputeChecksums() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeChecksums")
	ret0, _ := ret[0].(error)
	return ret0
}

// ComputeChecksums indicates an expected call of ComputeChecksums.
func (mr *MockReleaseMockRecorder) ComputeChecksums() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeChecksums", reflect.TypeOf((*MockRelease)(nil).ComputeChecksums))
}

// CreateAndPushTagToGitHub mocks base method.
func (m *MockRelease) CreateAndPushTagToGitHub(ctx context.Context, pat, version, path, commitSHA string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAndPushTagToGitHub", ctx, pat, version, path, commitSHA)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAndPushTagToGitHub indicates an expected call of CreateAndPushTagToGitHub.
func (mr *MockReleaseMockRecorder) CreateAndPushTagToGitHub(ctx, pat, version, path, commitSHA any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAndPushTagToGitHub", reflect.TypeOf((*MockRelease)(nil).CreateAndPushTagToGitHub), ctx, pat, version, path, commitSHA)
}

// CreateAssets mocks base method.
func (m *MockRelease) CreateAssets(dirPath, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssets", dirPath, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAssets indicates an expected call of CreateAssets.
func (mr *MockReleaseMockRecorder) CreateAssets(dirPath, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssets", reflect.TypeOf((*MockRelease)(nil).CreateAssets), dirPath, version)
}

// CreateGitHubClient mocks base method.
func (m *MockRelease) CreateGitHubClient(pat string) *github.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitHubClient", pat)
	ret0, _ := ret[0].(*github.Client)
	return ret0
}

// CreateGitHubClient indicates an expected call of CreateGitHubClient.
func (mr *MockReleaseMockRecorder) CreateGitHubClient(pat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitHubClient", reflect.TypeOf((*MockRelease)(nil).CreateGitHubClient), pat)
}

// CreateGitHubRelease mocks base method.
func (m *MockRelease) CreateGitHubRelease(ctx context.Context, client *github.Client, version, notesContent string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitHubRelease", ctx, client, version, notesContent)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitHubRelease indicates an expected call of CreateGitHubRelease.
func (mr *MockReleaseMockRecorder) CreateGitHubRelease(ctx, client, version, notesContent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitHubRelease", reflect.TypeOf((*MockRelease)(nil).CreateGitHubRelease), ctx, client, version, notesContent)
}

// DeployToVercel mocks base method.
func (m *MockRelease) DeployToVercel(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployToVercel", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployToVercel indicates an expected call of DeployToVercel.
func (mr *MockReleaseMockRecorder) DeployToVercel(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployToVercel", reflect.TypeOf((*MockRelease)(nil).DeployToVercel), ctx)
}

// DownloadReleaseAssetsAndNotes mocks base method.
func (m *MockRelease) DownloadReleaseAssetsAndNotes(ctx context.Context, client *github.Client, dirPath, pat string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadReleaseAssetsAndNotes", ctx, client, dirPath, pat)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadReleaseAssetsAndNotes indicates an expected call of DownloadReleaseAssetsAndNotes.
func (mr *MockReleaseMockRecorder) DownloadReleaseAssetsAndNotes(ctx, client, dirPath, pat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadReleaseAssetsAndNotes", reflect.TypeOf((*MockRelease)(nil).DownloadReleaseAssetsAndNotes), ctx, client, dirPath, pat)
}

// GetAssets mocks base method.
func (m *MockRelease) GetAssets() []ReleaseAsset {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssets")
	ret0, _ := ret[0].([]ReleaseAsset)
	return ret0
}

// GetAssets indicates an expected call of GetAssets.
func (mr *MockReleaseMockRecorder) GetAssets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssets", reflect.TypeOf((*MockRelease)(nil).GetAssets))
}

// GetFormulaFilePath mocks base method.
func (m *MockRelease) GetFormulaFilePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFormulaFilePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFormulaFilePath indicates an expected call of GetFormulaFilePath.
func (mr *MockReleaseMockRecorder) GetFormulaFilePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFormulaFilePath", reflect.TypeOf((*MockRelease)(nil).GetFormulaFilePath))
}

// GetFormulaTemplate mocks base method.
func (m *MockRelease) GetFormulaTemplate() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFormulaTemplate")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFormulaTemplate indicates an expected call of GetFormulaTemplate.
func (mr *MockReleaseMockRecorder) GetFormulaTemplate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFormulaTemplate", reflect.TypeOf((*MockRelease)(nil).GetFormulaTemplate))
}

// GetNotesContent mocks base method.
func (m *MockRelease) GetNotesContent() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotesContent")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNotesContent indicates an expected call of GetNotesContent.
func (mr *MockReleaseMockRecorder) GetNotesContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotesContent", reflect.TypeOf((*MockRelease)(nil).GetNotesContent))
}

// GetRepoPath mocks base method.
func (m *MockRelease) GetRepoPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRepoPath indicates an expected call of GetRepoPath.
func (mr *MockReleaseMockRecorder) GetRepoPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoPath", reflect.TypeOf((*MockRelease)(nil).GetRepoPath))
}

// GetVersion mocks base method.
func (m *MockRelease) GetVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockReleaseMockRecorder) GetVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockRelease)(nil).GetVersion))
}

// LoadReleaseNotes mocks base method.
func (m *MockRelease) LoadReleaseNotes() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadReleaseNotes")
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadReleaseNotes indicates an expected call of LoadReleaseNotes.
func (mr *MockReleaseMockRecorder) LoadReleaseNotes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadReleaseNotes", reflect.TypeOf((*MockRelease)(nil).LoadReleaseNotes))
}

// OpenAssetFile mocks base method.
func (m *MockRelease) OpenAssetFile(path string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenAssetFile", path)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenAssetFile indicates an expected call of OpenAssetFile.
func (mr *MockReleaseMockRecorder) OpenAssetFile(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenAssetFile", reflect.TypeOf((*MockRelease)(nil).OpenAssetFile), path)
}

// ReleaseExists mocks base method.
func (m *MockRelease) ReleaseExists(ctx context.Context, client *github.Client, version string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseExists", ctx, client, version)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseExists indicates an expected call of ReleaseExists.
func (mr *MockReleaseMockRecorder) ReleaseExists(ctx, client, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseExists", reflect.TypeOf((*MockRelease)(nil).ReleaseExists), ctx, client, version)
}

// RenderFormulaTemplate mocks base method.
func (m *MockRelease) RenderFormulaTemplate() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenderFormulaTemplate")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenderFormulaTemplate indicates an expected call of RenderFormulaTemplate.
func (mr *MockReleaseMockRecorder) RenderFormulaTemplate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderFormulaTemplate", reflect.TypeOf((*MockRelease)(nil).RenderFormulaTemplate))
}

// SaveFormulaFile mocks base method.
func (m *MockRelease) SaveFormulaFile(content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFormulaFile", content)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFormulaFile indicates an expected call of SaveFormulaFile.
func (mr *MockReleaseMockRecorder) SaveFormulaFile(content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFormulaFile", reflect.TypeOf((*MockRelease)(nil).SaveFormulaFile), content)
}

// UploadReleaseAsset mocks base method.
func (m *MockRelease) UploadReleaseAsset(ctx context.Context, client *github.Client, releaseID int64, name, mediaType string, file *os.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadReleaseAsset", ctx, client, releaseID, name, mediaType, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadReleaseAsset indicates an expected call of UploadReleaseAsset.
func (mr *MockReleaseMockRecorder) UploadReleaseAsset(ctx, client, releaseID, name, mediaType, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadReleaseAsset", reflect.TypeOf((*MockRelease)(nil).UploadReleaseAsset), ctx, client, releaseID, name, mediaType, file)
}

// Validate mocks base method.
func (m *MockRelease) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockReleaseMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockRelease)(nil).Validate))
}
